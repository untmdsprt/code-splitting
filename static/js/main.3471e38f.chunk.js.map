{"version":3,"sources":["components/Page1.js","App.js","serviceWorker.js","index.js","components/logo.svg"],"names":["Page1","_ref","onRouteChange","react_default","a","createElement","className","src","logo","alt","onClick","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","route","setState","__webpack_require__","e","then","bind","Page2","console","log","component","default","Page3","state","components_Page1","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","p"],"mappings":"gQAgBmBA,EAXL,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,cAAH,OACVC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,qBAEFH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAlB,SACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAMR,EAAc,WAArC,SACAC,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAMR,EAAc,WAArC,WCqCOS,cA1Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFb,cAAgB,SAACiB,GAID,UAAVA,EACFP,EAAKQ,SAAS,CAACD,MAAOA,IACH,UAAVA,EACTE,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAA6BD,KAAK,SAACE,GACjCC,QAAQC,IAAIF,GACZb,EAAKQ,SAAS,CAACD,MAAOA,EAAOS,UAAWH,EAAMI,YAE7B,UAAVV,GACTE,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAA6BD,KAAK,SAACO,GACjClB,EAAKQ,SAAS,CAACD,MAAOA,EAAOS,UAAWE,EAAMD,aAnBlDjB,EAAKmB,MAAQ,CACXZ,MAAO,QACPS,UAAW,IAJDhB,wEAkCZ,MAAyB,UAArBG,KAAKgB,MAAMZ,MACNhB,EAAAC,EAAAC,cAAC2B,EAAD,CAAO9B,cAAea,KAAKb,gBAE3BC,EAAAC,EAAAC,cAAAU,KAAMgB,MAAMH,UAAZ,CAAsB1B,cAAea,KAAKb,uBAtCrC+B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,sDE3HnBC,EAAAC,QAAiB7B,EAAA8B,EAAuB","file":"static/js/main.3471e38f.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport '../App.css';\n\n\nconst Page1 = ({ onRouteChange }) =>\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <button className=\"disabled\">Page1</button>\n        <button onClick={() => onRouteChange('page2')}>Page2</button>\n        <button onClick={() => onRouteChange('page3')}>Page3</button>\n    </div>\n\n    export default Page1;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Page1 from './components/Page1';\n// import Page2 from './components/Page2';\n// import Page3 from './components/Page3';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      route: 'page1',\n      component: ''\n    }\n  }\n\n  onRouteChange = (route) => {\n    // No Code Splitting:\n    // this.setState({route: route});\n    // With Code Splitting:\n    if (route === 'page1') {\n      this.setState({route: route})\n    } else if (route === 'page2') {\n      import('./components/Page2').then((Page2) => {\n        console.log(Page2)\n        this.setState({route: route, component: Page2.default})\n      })\n    } else if (route === 'page3') {\n      import('./components/Page3').then((Page3) => {\n        this.setState({route: route, component: Page3.default})\n      })\n    }\n  }\n\n  render() {\n    // if (this.state.route === 'page1'){\n    //   return <Page1 onRouteChange={this.onRouteChange} />\n    // } else if (this.state.route === 'page2') {\n    //     return <Page2 onRouteChange={this.onRouteChange} />\n    // } else if (this.state.route === 'page3') {\n    //   return <Page3 onRouteChange={this.onRouteChange} />\n    // }\n    if (this.state.route === 'page1') {\n      return <Page1 onRouteChange={this.onRouteChange} />\n    } else {\n      return <this.state.component onRouteChange={this.onRouteChange} />\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}